version: '3.9'

services:

  web:
    image: nginx
    container_name: store_nginx
   
    volumes:
      - ./var/log/nginx:/var/log/nginx #log файлы.
      - ./configs/nginx.conf:/etc/nginx/nginx.conf
      # - ./var/default.conf:/etc/nginx/conf.d/default.conf

    ports:
      - 8080:80
      - 443:443
      - 9000:9000
      - 9001:9001

    depends_on: 
      # - auth_service
      # - notifications_service
      - product_service
    restart: unless-stopped


  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - 2181:2181
    restart: unless-stopped



  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 9093:9093
    restart: unless-stopped
    
    environment:
      - KAFKA_BROKER_ID:1
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR:1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR:1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://:9092

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    
    depends_on: 
      - kafka
    ports:
      - "7777:8080"
    restart: unless-stopped
    environment:
      - KAFKA_CLUSTERS_0_NAME=kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

  postgres:
    image: postgres:latest
    container_name: store_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /data/postgres
  
    ports:
      - "5432:5432"
    volumes:
       - ./var/postgres:/data/postgres
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: store_minio
    expose:
    - "9000"
    - "9001"
    # ports:
    #   - "9000:9000"
    #   - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
     
      USE_SSL: false
    volumes:
      - ./var/storage-minio:/data

    command: server --address ":9000" --console-address ":9001" /data
    restart: unless-stopped
  
  redis:
    image: redis:latest
    container_name: store_redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER=${REDIS_USER}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - ./var/redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
 
  auth_service:
    build: auth_service
    container_name: auth_service
    restart: unless-stopped
    depends_on: 
      - postgres
      - minio

    ports:
      - "8081:8081"
      - "9999:9999"
    

  notifications_service:
    build: notifications_service
    container_name: notifications_service
    restart: unless-stopped
    depends_on: 
      - postgres
    volumes:
      - ./var/qr_codes:/qr_codes
     
    ports:
      - "8082:8082"
  product_service:
    build: product_service
    container_name: product_service
    restart: unless-stopped
    depends_on: 
      - postgres
      - minio
      - redis
      - auth_service

    ports:
      - "8083:8083"
      - "9998:9999"

  order_service:
    build: order_service
    container_name: order_service
    restart: unless-stopped
    depends_on: 
      - postgres
 
      - redis
      - auth_service

    ports:
      - "8084:8084"
   
    